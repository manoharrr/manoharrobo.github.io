{"version":3,"sources":["components/Card.js","components/CardArray.js","components/Searchbar.js","components/robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardArray","robots","map","user","i","key","Searchbar","searchfield","onsearchchange","type","placeholder","value","onChange","username","Scroll","props","style","overflowY","border","height","children","App","event","setState","target","state","filteredrobots","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MAceA,MAZf,YAAkC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAAOC,EAAI,EAAJA,GAC5B,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,GACL,2BAAIC,MCaMK,MAlBf,YAA+B,IAAVC,EAAS,EAATA,OACpB,OACC,kBAAC,WAAD,KACAA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CACCC,IAAOD,EACPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCIPW,MAbf,YAAmD,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,eAChC,OACC,yBAAKX,UAAU,UACd,2BAAOA,UAAU,gCACjBY,KAAK,OACLC,YAAY,cACZC,MAAOJ,EACPK,SAAUJ,MCVAP,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,gBACNmB,SAAU,OACVlB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNmB,SAAU,YACVlB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNmB,SAAU,WACVlB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNmB,SAAU,WACVlB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNmB,SAAU,SACVlB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNmB,SAAU,mBACVlB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNmB,SAAU,eACVlB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNmB,SAAU,gBACVlB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNmB,SAAU,WACVlB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNmB,SAAU,iBACVlB,MAAO,2BCjDImB,MARf,SAAgBC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAY,SAAUC,OAAQ,kBAAkBC,OAAO,UAClEJ,EAAMK,SADR,MCyDaC,E,kDA/Bb,aAAc,IAAD,8BACX,gBAOFb,eAAiB,SAACc,GAChB,EAAKC,SAAS,CAAChB,YAAae,EAAME,OAAOb,SAPzC,EAAKc,MAAM,CACTxB,OAAQA,EACRM,YAAa,IAJJ,E,qDAaH,IAAD,OACDmB,EAAiBC,KAAKF,MAAMxB,OAAO2B,QAAO,SAAA3B,GAC9C,OAAOA,EAAOP,KAAKmC,cAAcC,SAAS,EAAKL,MAAMlB,YAAYsB,kBAEnE,OACE,yBAAKhC,UAAU,MACX,+CACF,kBAAC,EAAD,CAAWW,eAAgBmB,KAAKnB,iBAChC,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWP,OAAQyB,W,GAxBbK,IAAMC,W,MCjBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAEL,kBAAC,EAAD,MAQFC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ff5fe7cf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({ name, email, id}){\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw3 shadow-5\">\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n \t\t\t\t<h2>{name}</h2>\r\n \t\t\t\t<p>{email}</p>\r\n \t\t\t</div>\r\n \t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React, {Fragment} from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardArray ({robots}) {\r\n\treturn (\r\n\t\t<Fragment>{\r\n\t\trobots.map((user,i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Card\r\n\t\t\t\t key = {i}\r\n\t\t\t\t id={robots[i].id}\r\n\t\t\t\t name={robots[i].name}\r\n\t\t\t\t email={robots[i].email}\r\n\t\t\t\t />\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\t\r\n\t\t</Fragment>\r\n\t\t);\r\n}\r\n\r\nexport default CardArray;\r\n","import React from 'react';\r\n\r\n\r\nfunction Searchbar({searchfield, onsearchchange}) {\r\n\treturn (\r\n\t\t<div className='tc pa2'>\r\n\t\t\t<input className='pa3 b--green bg-lightest-blue'\r\n\t\t\ttype='text'\r\n\t\t\tplaceholder='Search here'\r\n\t\t\tvalue={searchfield}\r\n\t\t\tonChange={onsearchchange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbar;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n\treturn (\r\n\t\t<div style={{overflowY : 'scroll', border: '3px solid black',height:'550px'}}>\r\n\t\t\t{props.children};\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\nimport CardArray from '../components/CardArray.js';\nimport Searchbar from '../components/Searchbar.js';\nimport {robots} from '../components/robots.js';\nimport Scroll from '../components/Scroll.js';\n//import logo from './logo.svg';\n// import './App.css';\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      robots: robots,\n      searchfield: ''\n    }\n  }\n\n  onsearchchange = (event) =>{\n    this.setState({searchfield: event.target.value})\n    \n  }\n\n  render() {\n    const filteredrobots = this.state.robots.filter(robots => {\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n          <h1>Robot Searchbar</h1>\n        <Searchbar onsearchchange={this.onsearchchange}/>\n        <div>\n          <Scroll>\n            <CardArray robots={filteredrobots}/>\n          </Scroll>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Hello from './Hello.js';\n//import Card from './Card.js';\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />\n    // <div>\n    // <Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n    // <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n    // <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n    // </div>\n    ,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}